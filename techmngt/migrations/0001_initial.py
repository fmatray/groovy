# Generated by Django 2.1.5 on 2019-01-04 23:06

import django.db.models.deletion
import markdownx.models
import simple_history.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('funcmngt', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TechFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('status', models.CharField(
                    choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'),
                             ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True,
                                                                help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>",
                                                                null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True,
                                                            help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>",
                                                            verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Technical flow',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AsynchronousFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('flow_id', models.CharField(blank=True, default='', max_length=64, null=True, unique=True, verbose_name='Flow ID')),
                ('filename', models.CharField(blank=True, max_length=256, null=True, verbose_name='File name')),
                ('codepage', models.CharField(blank=True, choices=[('ASCII', 'ASCII'), ('Binary', 'Binary'), ('EBCDIC', 'EBCDIC')], max_length=64, null=True, verbose_name='Code page')),
            ],
            options={
                'verbose_name_plural': 'Asynchronous Flows',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAsynchronousFlow',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('flow_id', models.CharField(blank=True, db_index=True, default='', max_length=64, null=True, verbose_name='Flow ID')),
                ('filename', models.CharField(blank=True, max_length=256, null=True, verbose_name='File name')),
                ('codepage', models.CharField(blank=True, choices=[('ASCII', 'ASCII'), ('Binary', 'Binary'), ('EBCDIC', 'EBCDIC')], max_length=64, null=True, verbose_name='Code page')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical asynchronous flow',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBatchFlow',
            fields=[
                ('techflow_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='techmngt.TechFlow')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('frequency', models.CharField(choices=[('On demand', 'On demand'), ('On file', 'On file'), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quaterly', 'Quaterly'), ('Annually', 'Annually')], max_length=32, verbose_name='Frequency')),
                ('hours', models.CharField(blank=True, max_length=256, null=True, verbose_name='Hours')),
                ('batch_name', models.CharField(db_index=True, default='', max_length=256, verbose_name='Batch name')),
                ('ord_name', models.CharField(db_index=True, default='', max_length=256, verbose_name='Ord. name')),
                ('script_name', models.CharField(db_index=True, default='', max_length=256, verbose_name='Script name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('input_flow', models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='techmngt.AsynchronousFlow', verbose_name='Input Flow')),
                ('output_flow', models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='techmngt.AsynchronousFlow', verbose_name='Output Flow')),
                ('polymorphic_ctype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.ContentType')),
                ('subfunc_flow', models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='funcmngt.SubFuncFlow', verbose_name='Functional Sub Flow')),
            ],
            options={
                'verbose_name': 'historical Batch',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNetworkFlow',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('source_nat_ip', models.CharField(blank=True, max_length=64, verbose_name='Source NAT IP')),
                ('destination_nat_ip', models.CharField(blank=True, max_length=64, verbose_name='Destination NAT IP')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Network flow',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProtocol',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('type', models.CharField(choices=[('Asynchronous', 'Asynchronous'), ('Synchronous', 'Synchronous')], default='Synchronous', max_length=20)),
                ('secure', models.BooleanField(default=False, verbose_name='Secure')),
                ('standard', models.BooleanField(default=False, verbose_name='Standard')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical protocol',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalServer',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('dns', models.CharField(blank=True, max_length=512, verbose_name='DNS')),
                ('ip', models.CharField(blank=True, max_length=64, verbose_name='IP')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical server',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalServerType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical server type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTechFlow',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('polymorphic_ctype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.ContentType')),
                ('subfunc_flow', models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='funcmngt.SubFuncFlow', verbose_name='Functional Sub Flow')),
            ],
            options={
                'verbose_name': 'historical Technical flow',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalURIFlow',
            fields=[
                ('techflow_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='techmngt.TechFlow')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('method', models.CharField(choices=[('HEAD', 'HEAD'), ('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], default='', max_length=32, verbose_name='method')),
                ('uri', models.CharField(max_length=512, verbose_name='URI')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('polymorphic_ctype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.ContentType')),
                ('subfunc_flow', models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='funcmngt.SubFuncFlow', verbose_name='Functional Sub Flow')),
            ],
            options={
                'verbose_name': 'historical URI',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='NetworkFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('source_nat_ip', models.CharField(blank=True, max_length=64, verbose_name='Source NAT IP')),
                ('destination_nat_ip', models.CharField(blank=True, max_length=64, verbose_name='Destination NAT IP')),
            ],
            options={
                'verbose_name': 'Network flow',
                'verbose_name_plural': 'Network flows',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('type', models.CharField(choices=[('Asynchronous', 'Asynchronous'), ('Synchronous', 'Synchronous')], default='Synchronous', max_length=20)),
                ('secure', models.BooleanField(default=False, verbose_name='Secure')),
                ('standard', models.BooleanField(default=False, verbose_name='Standard')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Protocols',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('dns', models.CharField(blank=True, max_length=512, verbose_name='DNS')),
                ('ip', models.CharField(blank=True, max_length=64, verbose_name='IP')),
            ],
            options={
                'verbose_name_plural': 'Servers',
            },
        ),
        migrations.CreateModel(
            name='ServerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('On going', 'On going'), ('Released', 'Released'), ('Retired', 'Retired'), ('Abort', 'Abort')], default='Draft', max_length=20)),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", null=True, verbose_name='Description')),
                ('documentation', models.URLField(blank=True, null=True, verbose_name='Documentation')),
                ('comment', markdownx.models.MarkdownxField(blank=True, help_text="<a href='https://en.wikipedia.org/wiki/Markdown'>You can use Markdown</a>", verbose_name='Comment')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Server Type',
            },
        ),
        migrations.CreateModel(
            name='BatchFlow',
            fields=[
                ('techflow_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='techmngt.TechFlow')),
                ('frequency', models.CharField(choices=[('On demand', 'On demand'), ('On file', 'On file'), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quaterly', 'Quaterly'), ('Annually', 'Annually')], max_length=32, verbose_name='Frequency')),
                ('hours', models.CharField(blank=True, max_length=256, null=True, verbose_name='Hours')),
                ('batch_name', models.CharField(default='', max_length=256, unique=True, verbose_name='Batch name')),
                ('ord_name', models.CharField(default='', max_length=256, unique=True, verbose_name='Ord. name')),
                ('script_name', models.CharField(default='', max_length=256, unique=True, verbose_name='Script name')),
            ],
            options={
                'verbose_name': 'Batch',
                'verbose_name_plural': 'Batches',
            },
            bases=('techmngt.techflow',),
        ),
        migrations.CreateModel(
            name='URIFlow',
            fields=[
                ('techflow_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='techmngt.TechFlow')),
                ('method', models.CharField(choices=[('HEAD', 'HEAD'), ('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], default='', max_length=32, verbose_name='method')),
                ('uri', models.CharField(max_length=512, verbose_name='URI')),
            ],
            options={
                'verbose_name': 'URI',
                'verbose_name_plural': 'URI',
            },
            bases=('techmngt.techflow',),
        ),
        migrations.AddField(
            model_name='techflow',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_techmngt.techflow_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='techflow',
            name='subfunc_flow',
            field=models.OneToOneField(default=None, limit_choices_to={'status__in': ('On going', 'Released')}, on_delete=django.db.models.deletion.CASCADE, related_name='techflow_subflow', to='funcmngt.SubFuncFlow', verbose_name='Functional Sub Flow'),
        ),
        migrations.AddField(
            model_name='techflow',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='server',
            name='server_type',
            field=models.OneToOneField(blank=True, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='server_servertype', to='techmngt.ServerType', verbose_name='Server Type'),
        ),
        migrations.AddField(
            model_name='server',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='networkflow',
            name='destination_server',
            field=models.ForeignKey(blank=True, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='destination_server_env', to='techmngt.Server', verbose_name='Destination server'),
        ),
        migrations.AddField(
            model_name='networkflow',
            name='source_server',
            field=models.ForeignKey(blank=True, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_server_env', to='techmngt.Server', verbose_name='Source server'),
        ),
        migrations.AddField(
            model_name='networkflow',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='historicalserver',
            name='server_type',
            field=models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='techmngt.ServerType', verbose_name='Server Type'),
        ),
        migrations.AddField(
            model_name='historicalnetworkflow',
            name='destination_server',
            field=models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='techmngt.Server', verbose_name='Destination server'),
        ),
        migrations.AddField(
            model_name='historicalnetworkflow',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalnetworkflow',
            name='source_server',
            field=models.ForeignKey(blank=True, db_constraint=False, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='techmngt.Server', verbose_name='Source server'),
        ),
        migrations.AddField(
            model_name='historicalasynchronousflow',
            name='protocol',
            field=models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'status__in': ('On going', 'Released'), 'type': 'Asynchronous'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='techmngt.Protocol', verbose_name='Protocol'),
        ),
        migrations.AddField(
            model_name='asynchronousflow',
            name='protocol',
            field=models.ForeignKey(limit_choices_to={'status__in': ('On going', 'Released'), 'type': 'Asynchronous'}, on_delete=django.db.models.deletion.CASCADE, related_name='asynchronousflow_protocol', to='techmngt.Protocol', verbose_name='Protocol'),
        ),
        migrations.AddField(
            model_name='asynchronousflow',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='batchflow',
            name='input_flow',
            field=models.OneToOneField(blank=True, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='batch_input_flow', to='techmngt.AsynchronousFlow', verbose_name='Input Flow'),
        ),
        migrations.AddField(
            model_name='batchflow',
            name='output_flow',
            field=models.OneToOneField(blank=True, default=None, limit_choices_to={'status__in': ('On going', 'Released')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='batch_output_flow', to='techmngt.AsynchronousFlow', verbose_name='Output Flow'),
        ),
    ]
